import os
from sqlite3 import Connection
import oracledb
from modelo import Contato



class Repositorio:
    
    def __init__(self):
        self.usuario = os.environ.get("FIAP_ORACLE_USER")
        self.senha = os.environ.get("FIAP_ORACLE_PASS")
        self.url = "oracle.fiap.com.br:1521/orcl"
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    def gerar_conexao(self) -> Connection:
        conexao = oracledb.connect(
            user=self.usuario,
            password=self.senha,
            dsn=self.url
        )
        return conexao
 #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    def check_contato(self, contato_id : int) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = "Select * from contatos where id = :1"
        try:
            cursor.execute(sql,(contato_id,))
            resultado = cursor.fetchone()
            print(f"Resultado da consulta para o ID {contato_id}: {resultado}")
            return resultado is not None
        except Exception as err:
            print(err)
            return False
        finally:  
            conexao.close()
        
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
    def adicionar_contato(self, contato : Contato) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = """INSERT INTO contatos (nome, telefone, email) VALUES (:1, :2, :3)"""
        try:
            cursor.execute(sql, (contato.nome, contato.telefone, contato.email))
            print("Contato adicionado!")
            conexao.commit()
        except Exception as err:
            print(err)
            conexao.rollback()
            return False
        conexao.close()
        return True
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
    def pesquisar_contato(self, nome : str) -> list:
        conexao = self.gerar_conexao()
        cursor =  conexao.cursor()
        sql = "SELECT * FROM contatos WHERE nome LIKE :1"
        cursor.execute(sql,("%" + nome + "%",))
        resultato = []
        for dados in cursor:
            c1 = Contato(contato_id = dados[0],
                         nome=dados[1],
                         telefone=dados[2],
                         email=dados[3])
            resultato.append(dados)
        conexao.close()
        return resultato
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    def remover_contato(self, contato_id : int) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = "DELETE FROM contatos WHERE id = :1"
        try:
            cursor.execute(sql,(contato_id,))
            conexao.commit()
        except Exception as err:
            print(err)
            conexao.rollback()
            return False
        conexao.close()
        return True
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    def atualizar_contato(self, contato_id : int, contato : Contato) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql = "UPDATE contatos SET nome = :1, telefone = :2, email = :3 where id = :4"
        try:
            cursor.execute(sql,(contato.nome, contato.telefone, contato.email, contato.id))
            conexao.commit()
        except Exception as err:
            conexao.rollback()
            print(err)
            return False
        conexao.close()
        return True
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    def gerar_tabela(self) -> bool:
        conexao = self.gerar_conexao()
        cursor = conexao.cursor()
        sql_check_if_exist = "SELECT 1 FROM contatos"
        sql_drop_table = """DROP TABLE contatos"""
        sql_drop_constraint = """DROP CONSTRAINT contatos_pk"""
        sql_create_table = """
            CREATE TABLE contatos (
                id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                nome varchar2(100),
                telefone varchar2(20),
                email varchar2(50)
            )
            """
        resultado = None
        try: 
            print("Testando se a tabela existe...")
            resultado = cursor.execute(sql_check_if_exist)
            print("Resultado: ", resultado)
            # if resultado:
            #     print("Dropando a tabela")
            #     cursor.execute(sql_drop_table)
            #     cursor.execute(sql_drop_constraint)
            #     conexao.commit()
        except Exception: 
            print("Tabela inexistente")

        try:
            print("Criando a tabela")
            cursor.execute(sql_create_table)
            conexao.commit()
        except Exception as err:
            print("Erro: ", err)
            conexao.rollback()
            return False
        conexao.close()
        return True
#/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if __name__ == "__main__":
    rep = Repositorio()
    contatos = rep.pesquisar_contato("Joao")
    